// api_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:developer' as developer;

enum HttpMethod { get, post, put, delete }

class ApiResponse<T> {
  final T? data;
  final int statusCode;
  final String? errorMessage;

  ApiResponse({
    this.data,
    required this.statusCode,
    this.errorMessage,
  });

  bool get isSuccess => statusCode >= 200 && statusCode < 300;
}

class ApiService {
  static const String baseUrl = 'https://your-api-base-url.com';

  Map<String, String> get _defaultHeaders => {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  };

  Future<ApiResponse<T>> request<T>({
    required String endpoint,
    required HttpMethod method,
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    T Function(dynamic)? parser,
    bool log = false,
  }) async {
    try {
      final url = Uri.parse('$baseUrl$endpoint');
      final requestHeaders = {..._defaultHeaders, ...(headers ?? {})};
      http.Response response;
      if (log) {
        logRequest(method, url, body, requestHeaders);
      }
      switch (method) {
        case HttpMethod.get:
          response = await http.get(url, headers: requestHeaders);
          break;
        case HttpMethod.post:
          response = await http.post(
            url,
            headers: requestHeaders,
            body: jsonEncode(body),
          );
          break;
        case HttpMethod.put:
          response = await http.put(
            url,
            headers: requestHeaders,
            body: jsonEncode(body),
          );
          break;
        case HttpMethod.delete:
          response = await http.delete(url, headers: requestHeaders);
          break;
      }

      // Log response only if log is true
      if (log) {
        logResponse(response);
      }

      return _handleResponse(response, parser);
    } catch (e) {
      return ApiResponse(
        statusCode: 0,
        errorMessage: 'Network error: $e',
      );
    }
  }

  ApiResponse<T> _handleResponse<T>(
      http.Response response,
      T Function(dynamic)? parser,
      ) {
    final statusCode = response.statusCode;
    final responseBody = jsonDecode(response.body);

    switch (statusCode) {
      case 200:
      case 201:
        try {
          final data = parser != null ? parser(responseBody) : responseBody as T;
          return ApiResponse(data: data, statusCode: statusCode);
        } catch (e) {
          return ApiResponse(
            statusCode: statusCode,
            errorMessage: 'Parsing error: $e',
          );
        }
      case 400:
        return ApiResponse(
          statusCode: statusCode,
          errorMessage: responseBody['message'] ?? 'Bad request',
        );
      case 401:
        return ApiResponse(
          statusCode: statusCode,
          errorMessage: 'Unauthorized access',
        );
      case 403:
        return ApiResponse(
          statusCode: statusCode,
          errorMessage: 'Forbidden',
        );
      case 404:
        return ApiResponse(
          statusCode: statusCode,
          errorMessage: 'Resource not found',
        );
      case 500:
        return ApiResponse(
          statusCode: statusCode,
          errorMessage: 'Server error',
        );
      default:
        return ApiResponse(
          statusCode: statusCode,
          errorMessage: 'Unexpected error: $statusCode',
        );
    }
  }

  void logRequest(HttpMethod method, Uri url, dynamic body, Map<String, String> headers) {
    developer.log('API Request:');
    developer.log('Method: ${method.name.toUpperCase()}');
    developer.log('URL: $url');
    developer.log('Headers: $headers');
    if (body != null) developer.log('Body: ${jsonEncode(body)}');
  }

  void logResponse(http.Response response) {
    developer.log('API Response:');
    developer.log('Status: ${response.statusCode}');
    developer.log('Body: ${response.body}');
  }
}
